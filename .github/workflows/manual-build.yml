name: Manual Build

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - macos-intel
          - macos-apple-silicon
          - linux

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  build-windows:
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == 'windows' }}
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target\n. -> target'

      - name: Ensure Windows icon (placeholder if missing)
        shell: pwsh
        run: |
          if (-not (Test-Path 'icons')) { New-Item -ItemType Directory -Force -Path 'icons' | Out-Null }
          if (-not (Test-Path 'icons/icon.ico')) {
            try {
              Add-Type -AssemblyName System.Drawing
              $bmp = New-Object System.Drawing.Bitmap 256,256
              $g = [System.Drawing.Graphics]::FromImage($bmp)
              $g.Clear([System.Drawing.Color]::FromArgb(0, 122, 255))
              $g.Dispose()
              $hicon = $bmp.GetHicon()
              $icon  = [System.Drawing.Icon]::FromHandle($hicon)
              $fs    = [System.IO.File]::Open('icons/icon.ico', [System.IO.FileMode]::Create)
              $icon.Save($fs)
              $fs.Close()
            } catch {
              Write-Host 'Failed to generate icon.ico; build may fail if required.'
            }
          }

      - name: Build (Tauri)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --verbose

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            target/**/release/bundle/msi/*.msi
            target/**/release/*.exe
            src-tauri/target/**/release/bundle/msi/*.msi
            src-tauri/target/**/release/*.exe

  build-macos-intel:
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos-intel' }}
    runs-on: macos-13
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup (x86_64)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target\n. -> target'

      - name: Build (Tauri, x86_64)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --verbose --target x86_64-apple-darwin

      - name: Upload macOS Intel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel-build
          path: |
            target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
            target/x86_64-apple-darwin/release/bundle/macos/*.app
            src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/x86_64-apple-darwin/release/bundle/macos/*.app

  build-macos-apple-silicon:
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos-apple-silicon' }}
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup (aarch64)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target\n. -> target'

      - name: Build (Tauri, aarch64)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --verbose --target aarch64-apple-darwin

      - name: Upload macOS Apple Silicon artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-apple-silicon-build
          path: |
            target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            target/aarch64-apple-darwin/release/bundle/macos/*.app
            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app

  build-linux:
    if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == 'linux' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config \
            libssl-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target\n. -> target'

      - name: Build (Tauri, Linux)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --verbose

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            target/**/release/bundle/deb/*.deb
            target/**/release/bundle/appimage/*.AppImage
            src-tauri/target/**/release/bundle/deb/*.deb
            src-tauri/target/**/release/bundle/appimage/*.AppImage

